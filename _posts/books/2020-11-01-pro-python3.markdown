---
layout: single
title: Pro Python 3
date: 2020-11-01 00:00:00 -0500
categories: books
toc: true
toc_label: "Table of Contents"
toc_icon: "bookmark"
---

Highly recommend book to learn Python 3. Here, I've found some 
interesting topics, that sounds good to me to review. 

<div class="book_preview">
<iframe type="text/html" width="336" height="550" frameborder="0" allowfullscreen 
    style="max-width:100%" 
    src="https://read.amazon.com/kp/card?asin=B07PQBH4LL&preview=inline&linkCode=kpe&ref_=cm_sw_r_kb_dp_wF3OFb33V7HPC" >
</iframe>
</div>

---

Topics
------

This book has many good topics, but for short I'll take only two small ones.  
 
 - Iterators
     - List comprehensions
     - Collections
 - Functions
     - Arguments  
   
Iterators
---------
 
 Examples with List comprehensions, *(try them in your REPL)*
 
  ``` python
    # List 
    [x * y for x in [20, 40, 60] for y in [2, 4, 6]]
    
    # Set 
    {value for value in range(0, 13, 3) if value > 5}

    # Dict
    {f"a{a}": a*2-1 if a%2==0 else a*3-2 for a in range(1, 10)}

    # Unpacking
    r = {'Leo': 10, 'Mia': 44} 
    { **r, 'Sue': 22 }

  ``` 
 
 With Itertools, I can do some amazing tricks
 
 ``` python 
    import itertools
    list(itertools.chain(range(3), range(4), range(5)))
    [0, 1, 2, 0, 1, 2, 3, 0, 1, 2, 3, 4]

    list(zip(range(3), reversed(range(5))))
    [(0, 4), (1, 3), (2, 2)]

    keys = map(chr, range(97, 102))
    values = range(1, 6)
    dict(zip(keys, values))
 ``` 

 Sets Collections
 
 ``` python
    {1, 3, 5} | {7, 11}
    {1, 3, 5}.union({7, 11})

    {1, 2, 3} & {3, 4}
    {1, 2, 3}.intersection({3, 4})

    {1, 2, 3, 4, 5} – {2, 4, 6}
    {1, 2, 3, 4, 5}.difference({2, 4, 6})

    {1, 2, 3, 4, 5} ^ {4, 5, 6}
    {1, 2, 3, 4, 5}.symmetric_difference({4, 5, 6})

    {1, 2, 3}.issubset({1, 2, 3, 4, 5})
    {1, 2, 3, 4, 5}.issubset({1, 2, 3})
    {1, 2, 3}.issuperset({1, 2, 3, 4, 5})

    not ({1, 2, 3} – {1, 2, 3, 4, 5})
    True
    not ({1, 2, 3, 4, 5} – {1, 2, 3})
    False

 ``` 

 NamedTuples *Collections*
 ``` python
     >>> from collections import namedtuple
     >>> Point = namedtuple('Point', 'x y')
     >>> point = Point(13, 25)
     >>> point
     Point(x=13, y=25)
     >>> point.x, point.y
 ``` 

 OrderedDict *Collections* 
 ``` python
 from collections import OrderedDict
 >>> d = OrderedDict((value, str(value)) for value in range(10) if value > 5)
 ```
 
 Dictionaries with Default
 ``` python
 def count_words(text):
    count = defaultdict(int)
    for word in text.split(' '):
    count[word] += 1
    return count

 ```
 
Functions
---------
 
 *Arguments*
  
 There are only four types of arguments, listed here in the 
 order they generally appear in functions:
 
 - Required arguments
 - Optional arguments
 - Arbitrary arguments
 - Variable keyword arguments
 
 ``` python
 def sendmail(email_from, secure_mode=True, *emails_to, **email_options):
 ``` 


 


---
